// Copyright Â© 2017 HSL <https://www.hsl.fi>
// This program is dual-licensed under the EUPL v1.2 and AGPLv3 licenses.

package fi.hsl.parkandride.core.domain;

import org.joda.time.DateTime;
import org.junit.Test;

import static fi.hsl.parkandride.core.domain.CapacityType.BICYCLE;
import static fi.hsl.parkandride.core.domain.CapacityType.CAR;
import static fi.hsl.parkandride.core.domain.DayType.BUSINESS_DAY;
import static fi.hsl.parkandride.core.domain.DayType.SATURDAY;
import static fi.hsl.parkandride.core.domain.DayType.SUNDAY;
import static fi.hsl.parkandride.core.domain.FacilityStatus.*;
import static fi.hsl.parkandride.core.domain.PricingMethod.CUSTOM;
import static fi.hsl.parkandride.core.domain.PricingMethod.PARK_AND_RIDE_247_FREE;
import static fi.hsl.parkandride.core.domain.Usage.COMMERCIAL;
import static fi.hsl.parkandride.core.domain.Usage.PARK_AND_RIDE;
import static org.assertj.core.api.Assertions.assertThat;

public class FacilityIsOpenTest {

    final DateTime now = new DateTime();

    @Test
    public void is_open_when_status_is_IN_OPERATION() {
        Facility facility = parkAndRide247free(IN_OPERATION);
        assertOpen(facility, CAR, PARK_AND_RIDE, now);
    }

    @Test
    public void is_open_when_status_is_EXCEPTIONAL_SITUATION() {
        Facility facility = parkAndRide247free(EXCEPTIONAL_SITUATION);
        assertOpen(facility, CAR, PARK_AND_RIDE, now);
    }

    @Test
    public void is_open_when_status_is_INACTIVE() {
        Facility facility = parkAndRide247free(INACTIVE);
        assertClosed(facility, CAR, PARK_AND_RIDE, now);
    }

    @Test
    public void is_open_when_status_is_TEMPORARILY_CLOSED() {
        Facility facility = parkAndRide247free(TEMPORARILY_CLOSED);
        assertClosed(facility, CAR, PARK_AND_RIDE, now);
    }

    @Test
    public void is_open_when_capacityType_is_not_found() {
        Facility facility = parkAndRide247free(IN_OPERATION);
        assertClosed(facility, BICYCLE, PARK_AND_RIDE, now);
    }

    @Test
    public void is_open_when_usage_is_not_found() {
        Facility facility = parkAndRide247free(IN_OPERATION);
        assertClosed(facility, CAR, COMMERCIAL, now);
    }

    @Test
    public void is_open_at_start_of_monday() {
        Facility facility = customPricing();
        assertOpen(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-10T00:00:00+03:00"));
    }

    @Test
    public void is_closed_at_end_of_sunday() {
        Facility facility = customPricing();
        assertClosed(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-09T23:59:59+03:00"));
    }

    @Test
    public void is_closed_at_noon_monday() {
        Facility facility = customPricing();
        assertClosed(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-10T12:00:00+03:00"));
    }

    @Test
    public void is_open_at_end_of_monday() {
        Facility facility = customPricing();
        assertOpen(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-10T23:59:59+03:00"));
    }

    @Test
    public void is_open_at_start_of_friday() {
        Facility facility = customPricing();
        assertOpen(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-14T00:00:00+03:00"));
    }

    @Test
    public void is_open_at_start_of_saturday() {
        Facility facility = customPricing();
        assertOpen(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-15T00:00:00+03:00"));
    }

    @Test
    public void is_closed_on_saturday_at_closing_time() {
        Facility facility = customPricing();
        assertClosed(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-15T00:30:00+03:00"));
    }

    @Test
    public void is_open_on_saturday_just_before_closing_time() {
        Facility facility = customPricing();
        assertOpen(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-15T23:59:59+03:00"));
    }

    @Test
    public void is_closed_on_sunday_morning() {
        Facility facility = customPricing();
        assertClosed(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-16T00:30:00+03:00"));
    }

    @Test
    public void is_open_on_sunday_at_open_time() {
        Facility facility = customPricing();
        assertOpen(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-16T12:00:00+03:00"));
    }

    @Test
    public void is_open_uses_local_time_zone() {
        Facility facility = customPricing();
        assertClosed(facility, CAR, PARK_AND_RIDE, DateTime.parse("2017-04-16T12:00:00+02:00"));
    }

    private void assertOpen(Facility facility, CapacityType capacityType, Usage usage, DateTime time) {
        assertIsOpen(facility, capacityType, usage, time, true);
    }

    private void assertClosed(Facility facility, CapacityType capacityType, Usage usage, DateTime time) {
        assertIsOpen(facility, capacityType, usage, time, false);
    }

    private void assertIsOpen(Facility facility, CapacityType capacityType, Usage usage, DateTime time, boolean expectedToBeOpen) {
        assertThat(facility.isOpen(capacityType, usage, time)).isEqualTo(expectedToBeOpen);
    }

    private Facility parkAndRide247free(FacilityStatus status) {
        Facility facility = new Facility();
        facility.builtCapacity.put(CAR, 100);
        facility.pricingMethod = PARK_AND_RIDE_247_FREE;
        facility.status = status;
        facility.normalize();
        return facility;
    }

    private Facility customPricing() {
        Facility facility = new Facility();
        facility.status = IN_OPERATION;
        facility.builtCapacity.put(CAR, 100);
        facility.builtCapacity.put(BICYCLE, 100);
        facility.pricingMethod = CUSTOM;
        facility.pricing.add(new Pricing(CAR, PARK_AND_RIDE, 10, BUSINESS_DAY, "00", "01", null));
        facility.pricing.add(new Pricing(CAR, PARK_AND_RIDE, 10, BUSINESS_DAY, "23", "24", null));
        facility.pricing.add(new Pricing(CAR, PARK_AND_RIDE, 10, SATURDAY, "00", "00:30", null));
        facility.pricing.add(new Pricing(CAR, PARK_AND_RIDE, 10, SATURDAY, "23:30", "24", null));
        facility.pricing.add(new Pricing(CAR, PARK_AND_RIDE, 10, SUNDAY, "12:00", "13:00", null));
        return facility;
    }
}
